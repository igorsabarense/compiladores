D -> DECLARACAO
B -> BLOCO DE COMANDOS
C -> COMANDO
MAIN -> MAIN
T -> TIPO
V -> CONSTANTE
EXP -> EXPRESSAO

S -> {D} main B

B ->  "{" {C} "}"

D -> T id({,id} | = V | ["[V]"]); | final id = V;
T -> int | char | boolean
V -> [-] const | const_hexa | (TRUE | FALSE)
C -> ; | id["["EXP"]"] := EXP |
     for "(" {F} ; EXP ; {F} ")" ( C | "{"{C}"}" ) |
     if "(" EXP ")" then (C|B) [else (C|B)] |
     readln"("id["["EXP"]"]")" |
     write"("{EXP{,EXP}}")" | writeln"("{EXP{,EXP}}")"

F -> C[,C] | ,C
EXP -> EXPS [(= | <> | < | > | <= | >= ) EXPS]
EXPS -> [+|-] TS {( + | - | or ) TS}
TS -> FS {(* | / | % | and ) FS}
FS -> not FS | "("EXP")" | const | id["["EXP"]"]


for ( c1 , c2 , c3 ; exp ; c1, c2, c3; ) com
      id=EXP, id:=exp, idexp ; <> ; id id id ) { write exp}





